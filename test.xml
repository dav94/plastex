<document>
<document>
<par>
<maketitle>

</maketitle>

</par>
<par>
<newpage>

</newpage>

</par>
<par>
<tableofcontents>

</tableofcontents>

</par>
<par>
<newpage>

</newpage>

</par>
<section>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Introduction</title>
</attributes>
<par>
<math> x = 2 </math>
</par>
<par>
 <math>x=3</math> 
</par>
<par>
<math>  x^43 </math>
</par>
<par>
<math>  y = |y>  </math>
</par>
<par>
<figure>
<attributes>
<loc>h!</loc>
</attributes>
<par>
|A picture of a gull.
</par>
<par>
<centering>
[[gull]] 
</centering>

</par>

</figure>

</par>
<par>
 The main purpose of this project is the creation of an automated system to evalute the reliability and quality of articles and pages on a wiki-style learning platform. 
</par>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>The Problem</title>
</attributes>
<par>
 In wiki-style platform, new contents have to be evaluated by expert users to become reliable and to be shared with the public. That work is fondamental to guarantee the correctness of the platform’s content but could slow down the development of highly partecipated works with a lot of changes. Moreover finding a lot of experienced editors in a big community could be really difficult. How can we ensure the quality of contents and meanwhile make the system automatic? 
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>The Solution</title>
</attributes>
<par>
 Our base idea is measuring the trustworthiness of the users to evaluate their writing reliability and their ability to review other’s works. Every document is voted by users and, using our estimate of their reliability, we can get an overall rating of it. <accapo>The complete history of the document is followed to have a precise determination of its quality: every version has a weight related to its importance in the total document. Then, we found a way to identify stable versions using the distribution of the voters and votes: a kind of limit that it has to be reached to guarantee that a sufficient number of users has rated the content. <accapo>Every user’s action implies an adjustment of his rating, trying to measure his real reliability. In a system like this, the activity of the users is also important: more active users are a resource for the platform and have to be prized for their work. 
</par>
<par>
<newpage>

</newpage>

</par>

</paragraph>

</section>
<section>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>The User</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:user</label>
</attributes>

</label>
 Every user of <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
is identified by a unique ID and by two parameters that measures his performance: the trust (or reliability) coefficient (<math>\mathbf{\alpha }</math>) and the activity coefficient (<math>\theta </math>). 
</par>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Trust Coefficient</title>
</attributes>
<par>
 This parameter is a number between 0 to 1, we call it <math> \alpha </math>. The higher it is, the more we can trust the user’s judgements and we can consider his writings correct. This coefficient comes from the mean of Beta probability density function. 
</par>
<par>
<math>  B[x;a,b] = \frac{x^{a-1}\left(1-x\right)^{b-1}}{\displaystyle {\int _0^1 x^{a-1}\left(1-x\right)^{b-1}\,  \mathrm{d}x}} </math>
</par>
<par>
<math>  \alpha =\bar{x} = \frac{a}{a+b} </math>
</par>
<par>
<figure>
<attributes>
<loc>!hpt</loc>
</attributes>
<par>
<<<<<<< HEAD
<centering>
<par>
|Trust distribution
=======
<div style="text-align:center;"><par>
<caption>
<attributes>
<toc>None</toc>
</attributes>
Trust distribution
</caption>

>>>>>>> b8defb226db17f9bbd118627210344748b1efda4
</par>
<par>
 <label>
<attributes>
<label>fig:beta</label>
</attributes>

</label>
 
</par>
</div>
</par>

</figure>

</par>
<par>
 <accapo>We can see that <math>\alpha </math> depends on two parameter <math>a</math> and <math>b</math> that can vary between 0 and arbitrary positive values. If <math>a</math> is high, <math>\alpha </math> tends to 1. If <math>b</math> is high, <math> \alpha </math> tends to 0. In the Figure <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>fig:beta</label>
</attributes>

</ref>
 we can see Beta distribution with different <math>a,b</math> combination: <math>a = b</math> (blue), <math>a>b</math> (pink), <math>a<b</math> (green), <math>a>>b</math> (dark orange), <math>a<<b</math> (orange). 
</par>
<par>
In our model we decide to link <math>a</math> to the quality of user writing (evaluated by other users as we’ll describe in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltaa</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltaa</label>
</attributes>

</pageref>
). The max value of <math>a</math> is called <math>A_1</math> and it has to be determined a posteriori. Then we substitute <math>b</math> for <math>(A_2 - b)</math> (where <math>A_2</math> is a constant equal to the max value of <math>b</math> ) and we link <math>b</math> to the reliability of user judgements. 
</par>
<par>
<math>  \alpha =\bar{x} = \frac{a}{a+\left(A_2 - b\right)} </math>
</par>
<par>
 Thus, with high <math>a</math> and <math>b \rightarrow A_2</math> the trust coefficient tends to 1. Therefore, the trust coefficient depends on user writing and user ability to evaluate other works on the platform. In the section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:change_par</label>
</attributes>

</ref>
 at page <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:change_par</label>
</attributes>

</pageref>
, we will describe how <math>a</math> and <math>b</math> are calculated and how they varies during user activity. 
</par>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Activity Coefficient</title>
</attributes>
<par>
 This coefficient measures the activity level of a user in the platform. We call this number <math>\gamma </math>. If the value is between 0 and 1 the user is considered little active or inactive. If the value is between 1 to 2 the user is considered regular and if the value is greater than 2 he is regarded as really active. This coefficient is important in the calculations to modify ths user’s trust coefficient, as we will see later. The activity coefficient is proportional to the ratio of the number of actions done by the user over time. Furthermore this coefficient decreases quickly over the time if the user is absent from the platform (See section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltab</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltab</label>
</attributes>

</pageref>
). 
</par>
<par>
The initial values for the coefficients must be set properly according to our estimation of the user’s initial trust level. We can link it to domains of users’ email. For example accounts that use a recognized institutional domain (like <textit>
<attributes>
</attributes>
@unimib.it
</textit>
) will start with a trust coefficient higher that account that are registered with a student domain (like <textit>
<attributes>
</attributes>
@campus.unimib.it
</textit>
). That methods can be used to distinguish teachers from students and from common users. The initial value of <math>\alpha </math> could also vary over time, studying periodically the overall reliability of the users associated with every domain. 
</par>
<par>
<newpage>

</newpage>

</par>

</subsection>

</section>
<section>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>The Chain of Changes</title>
</attributes>
<par>
<label>
<attributes>
<label>sec:chch</label>
</attributes>

</label>
 We want now to describe how the <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system acts on the Chain of Changes (<textit>
<attributes>
</attributes>
ChCh
</textit>
) of a wiki page or document. 
</par>
<par>
The history of a document can be described as a descendant chain. First of all a user creates a new document, then another user makes changes on the top of the first version and saves it: a new ring of the chain is added. Every time an user works on that document new subsequent rings are added, multiple branches are not allowed. 
</par>
<par>
Versions are not all equally important: in the life of a page there are periods of heavy work and frequent changes and periods when the content is quite stable and definite. Usually, in wiki platform, stable versions must be marked by expert editors who check the document and decide that it is ready. In <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system we thought about a threshold mechanism able to decide automatically when a version must be marked as stable.<accapo>
</par>
<par>
Let’s start introducing how the rating system works. 
</par>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Marks</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:marks</label>
</attributes>

</label>
 Every registered user that visits a page can assign a vote between 1 to 10 that it is then scaled between 0 to 1 for the calculations. This mark refers to the latest version of the document that is always shown to visitors. Even if the last version is not marked as stable, it must be shown to users (reporting that as a warning) because it has to be evaluated. Votes are not shown on the page because other judgements must not be influenced (See <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:reaching_thre</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:reaching_thre</label>
</attributes>

</pageref>
). 
</par>
<par>
Every vote is associated with user’s trust coefficient that determines the weight of the mark. The global evaluation of <emph>
<attributes>
</attributes>
the single version
</emph>
 is calculated as a weighted average of single votes over the trust coefficients: 
</par>
<par>
<math><label> eq:v_ medio </label>   \bar{V} = \frac{\displaystyle {\sum _{i=1}^ n \alpha _ i \cdot V_ i}}{\displaystyle {\sum _{i=1}^ n \alpha _ i}} </math>
</par>
<par>
<math>  x^35 + 1  </math>
</par>
<par>
 Ciao come stai? 
</par>
<par>
<math>  equazione da scrivere </math>
</par>
<par>
 <math> x^32909 +1 +1 +1 +1 +1+432+ 2+ 3 </math> Ciao mi chiamo Gianluca <theorem>

</theorem>
<bgroup>
Theorem
</bgroup>
 Let <math>F</math> be a function and 
</par>
<par>
<math>  x^2  </math>
</par>
<par>
 something. 
</par>
<par>
<math>  v^2 + f +1 = 0 </math>
</par>
<par>
 <theorem>

</theorem>
[pythagorean] 
</par>
<par>
<math> x^ 3 \\ x^2 </math>
</par>
<par>
<cases>
<ArrayRow>
<ArrayCell>
<par>
 fuck 
</par>

</ArrayCell>

</ArrayRow>

</cases>

</par>
<par>
<math>  x^2 * x^2 s \\ x + w </math>
</par>
<par>
<align>
<ArrayRow>
<ArrayCell>
<par>
 v<active::^>
<attributes>
</attributes>
3
</active::^>
 + 1 + 2 
</par>

</ArrayCell>

</ArrayRow>

</align>

</par>
<par>
where <math>V_ i</math> are the votes and <math>\alpha _ i</math> are trust coefficients of the users. 
</par>
<par>
So, let’s make <math>x^3 + 1+ 1+ 1+ 1</math> an example: Alice creates the page and receives some votes, then Bob makes some changes and a new ring of the chain is created. Obviously new votes on Bob’s version not only evaluate Bob’s work but also Alice’s old work, depending on the number of Bob’s changes. Instead, votes of Alice’s work are not related at all with Bob’s subsequent editing but cannot be thrown away because Bob has not created an entirely new document. We need a new method to calculate global evaluation for the page and above all a criterion to establish when a version is considered stable. Let’s first explorate the latter. 
</par>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Trustworthiness of Marks</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:sigma</label>
</attributes>

</label>
 Users are not all equally reliable: for example marks from an ungraduate student must be less influential than marks from a teacher. A calculation of global vote for a page does not ensure us that a document has been checked and evaluated <emph>
<attributes>
</attributes>
sufficently
</emph>
. If a page is evaluated as nine but by five users only, we are not satisfied by the level of judgment. Furthermore our opinion could change depending on the five users’ trust coefficient. We need a measure of the <emph>
<attributes>
</attributes>
trustworthiness of the marks
</emph>
 from now called <math>\boldsymbol {\sigma }</math>. <accapo><textbf>
<attributes>
</attributes>
A document’s version is marked as stable when it has been sufficiently evaluated by users, thus when the overall <math>\boldsymbol {\sigma }</math> has passed an established threshold.
</textbf>
 In our model, stability of a document’s version is not related only to the votes that it has received , but it is related to the quality and quantity of the votes, i.e. to their distribution and to the trust coefficient of the users. A stable version has not necessarily an excellent average of votes, but if it’s stable we can be sure that it’s vote has been carefully evaluated by sufficient number of users and they agree to a certain extent. <textbf>
<attributes>
</attributes>
 <math>\boldsymbol {\sigma }</math> is an evalutation of the reliability of the average of marks of a document.
</textbf>
 That’s the function of <math>\sigma </math> parameter. <accapo><accapo>The <math>\sigma </math> of a user’s vote, called <math>\sigma _ i</math>, is calculated as (<math>i</math> is refered to the i-th users): 
</par>
<par>
<math><label> eq:single_ sigma </label>   \sigma _ i = \alpha _ i^ B \cdot \left(1- \Delta V\right)^ C \qquad \Delta V = |\bar{V}- V_ i| </math>
</par>
<par>
 In a <emph>
<attributes>
</attributes>
single version
</emph>
 the overall <math>\sigma </math> value is calculated as: 
</par>
<par>
<math><label> eq:partial_ sigma </label>   \sigma = \sum _{i=1}^ n \sigma _ i = \sum _{i=1}^ n \alpha _ i^ B \cdot \left(1- \Delta V\right)^ C </math>
</par>
<par>
 where <math>B</math> and <math>C</math> are constant that have to be chosen. Thus, <math>\sigma </math> depends on <math>\alpha </math>, the trust coefficient of the user, and on the deviation of his vote from the weithed average of the votes as calculated in the eq. <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:v_medio</label>
</attributes>

</ref>
. If votes are distributed in a large range, their mean is less reliable as a global judgment, so <math>\sigma </math> is smaller. Wherease if votes are all close to each other, their mean has more significance and the <emph>
<attributes>
</attributes>
trustworthiness of the marks
</emph>
 <math>\sigma </math> increases. Obviously votes from more reliable users are more important than votes from users with a low <math>\alpha </math>. Parameters <math>B</math> and <math>C</math> could be used to make higher <math>\alpha </math> and <math>(1-\Delta V)</math> more important than smaller values. 
</par>
<par>
All the power of this system lives in the determination of the value of the threshold of <math> \sigma </math> that established it has been reach a new stable versione. Ideas about how to determine dinamically this fundamental value will be explored later (See section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:choose_sigma</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:choose_sigma</label>
</attributes>

</pageref>
). 
</par>
<par>
Now, returning to the problem of the Chain of Changes, what happens if Bob edits the document before <math>\sigma </math> threshold is reached? As we have already said, new votes are more important that old ones, but Alice’s work judgements cannot be thrown away. 
</par>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>The Decay Process</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:decay</label>
</attributes>

</label>
 When new not stable versions stack on the latest milestone of a document, every ring of the famous Chain of Changes is ranked by a variable number of users. For every version, we have a method to calculate the average vote (eq. <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:v_medio</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:v_medio</label>
</attributes>

</pageref>
) and the cumulative trustworthiness of marks, <math>\sigma </math> (eq. <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:partial_sigma</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:partial_sigma</label>
</attributes>

</pageref>
), but it’s not sufficient to be able to determinate when a new milestone must be created and it’s final mark. Furthermore, version are not all the same: there could be little corrections or big addictions and they are really different. 
</par>
<par>
Let’s make an example: Alice creates a new document of 1500 characters; Bob finds two spelling errors and creates a new revision, made of 10 characters. Some time later, Alice’s work has been voted by two people only because Bob has worked quickly. Bob’s version instead has been voted by a lot of people. <accapo>In this case considering only Bob’s revision’s marks (the latest) as valid it’s not a problem: the votes are related mainly to Alice’s work because she has made the real big part of the writing. Votes given to Alice could almost be added directly. 
</par>
<par>
If we reverse the situation things change a lot. Imagine that Alice, with her 1500 characters, receives a load of votes. Then, after some time, Bob makes a small correction and receives only a few votes. Can we consider only the lates marks as valid? In this case it would be wrong because the real judgements has been made by marks of the first version. After Bob’s intervention, new votes are still related to previous version. 
</par>
<par>
After the first two revisions, Charlie arrives on the page, decides to complete a poor paragraph of the document and saves a new version with 300 characters. He even receives a lot of valutations. In this case the writing has changed considerably and consequentially old votes are less significative: they lose importance compared to new votes relatively to the number of modified (added or removed) characters. 
</par>
<par>
If votes lose importance with the addiction of new rings to the Chain of Changes, also trustworthiness of marks <math>\sigma </math> has to be scaled along the revisions to make the system coherent. 
</par>
<par>
Now we’ll descrive how this sort of <textit>
<attributes>
</attributes>
<textbf>
<attributes>
</attributes>
Decay
</textbf>

</textit>
 takes part in <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system. PROVA 
</par>
<subsubsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>V Decay</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:v_decay</label>
</attributes>

</label>
 
</par>
<par>
 The Decay of Votes or <emph>
<attributes>
</attributes>
V Decay
</emph>
 must give us a way to calculate the average mark of a stack of versions of a document given the votes and 
</par>
<par>
 the number of changes of every ring. We called this mechanism "decay" just because at every new step of the chain, all previous calculations have to be scaled by a particular factor to take part in the next computing. Proceeding this way, step by step, is the best practice to make the computations the less complex possible with the accumulating of revisions. 
</par>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Initial data</title>
</attributes>
<par>
 Consider now a stack of revisions that begins with a new document <footnote>
<attributes>
<num>1</num>
</attributes>
what to do after a given stable version will be explained later in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:after_stable</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:after_stable</label>
</attributes>

</pageref>

</footnote>
. Every version has received a number <math>N_ i</math> of votes by <math>N_ i</math> users, everyone with his <math> \alpha _ i</math> coefficient. Every user can vote only one time every version. Taking individually every version, we calculate it’s weighted <emph>
<attributes>
</attributes>
partial
</emph>
 average of marks according to eq. <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:v_medio</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:v_medio</label>
</attributes>

</pageref>
, and we call those partial means <math>\bar{V}_ n</math>  (<math>n</math> is related to the n-th version).<accapo>Every version is characterized by an amount of changes: considering numerically both addiction and deletions as equal changes, we call that number <math>\lambda _ n</math> for every version. 
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Decay factor (DF)</title>
</attributes>
<par>
 Now, we start calculating a progressive <emph>
<attributes>
</attributes>
total average
</emph>
 <math>\tilde{V}_ i</math>  of marks, starting from the first revision. We use this simple recursive formula, : 
</par>
<par>
<math><label> eq:V_ hat1 </label>   \tilde{V}_1 = \bar{V}_1 \quad \longrightarrow \quad \tilde{V}_ n = \frac{\bar{V}_ n + \Phi _ n \cdot \tilde{V}_{n-1}}{1+ \Phi _ n} </math>
</par>
<par>
 For every step, the <emph>
<attributes>
</attributes>
total
</emph>
 average depends on the <emph>
<attributes>
</attributes>
partial
</emph>
 average of votes for the current revision, but the previos <emph>
<attributes>
</attributes>
total
</emph>
 average is not lost. Actually, the new <emph>
<attributes>
</attributes>
total
</emph>
 mark is a weighted mean between the current <emph>
<attributes>
</attributes>
partial
</emph>
 mark and the previous <emph>
<attributes>
</attributes>
total
</emph>
 mark over the <textbf>
<attributes>
</attributes>
Decay Factor (DF)
</textbf>
 <math>\mathbf{\Phi }</math>, that it’s different for every <math>n</math>. 
</par>
<par>
As we explained with examples at the beginning of <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:decay</label>
</attributes>

</ref>
 section, <emph>
<attributes>
</attributes>
DF
</emph>
 <math>\Phi </math> must depend on the relative number of changes between subsequent revisions. <accapo>Doing so <math>\Phi _ n</math> can be expressed as: 
</par>
<par>
<math><label> eq:phi </label>   \Phi _ n = \left(1- \frac{\lambda _ n}{\lambda _{n_{tot}}}\right)^ D </math>
</par>
<par>
 where <math>\lambda _{n_{tot}}</math> is given by the partial sum of all the changes from the beginning to the n-th version <emph>
<attributes>
</attributes>
included
</emph>
: 
</par>
<par>
<math>  \lambda _{n_{tot}} = \sum _{i=1}^ n \lambda _ i </math>
</par>
<par>
 The exponent <math>D</math> can be determined a posteriori. Let’s analyze the behavior of the <emph>
<attributes>
</attributes>
DF
</emph>
 <math>\Phi </math> .<accapo>
</par>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
If the n-th revision of the document introduces small changes compared to all the previous ones of other users, then <math>\Phi _ n \sim 1</math>. Thus, old votes will be mediated with new votes with almost the same weight in formula <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:V_hat1</label>
</attributes>

</ref>
. That’s coherent with the fact that old votes are still important for the document because only little changes has been made. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
If the n-th revision of the document introduces a number of changes of the order of the partial sum of the previous ones, <math>\lambda _{\left(n-1\right)_{tot}}</math>, then <math>\Phi _ n \sim \left(\frac{1}{2}\right)^ A</math>. In fact: 
</par>
<par>
<math>  \Phi _ n = \left(1- \frac{\lambda _ n}{\lambda _{n_{tot}}}\right)^ D \;  = \;  \left(1- \frac{\lambda _ n}{\lambda _{\left(n-1\right)_{tot}} + \lambda _ n}\right)^ D </math>
</par>
<par>
 and we are considering the case <math>\lambda _ n \sim \lambda _{\left(n-1\right)_{tot}}</math>. In this case older votes are becoming less and less important than newer and that’s consistent with the fact that the number of new changes is of the same order of the previous changes: there’s a big alteration in the document and must be revaluated. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
Finally, if the n-th revision introduces a number of changes really bigger than the partial sum of all the previous ones, <math>\Phi _ n \rightarrow 0</math>. Because <math>\lambda _ n</math> is included in <math>\lambda _{n_{tot}}</math>, to make <math>\Phi \rightarrow 0</math> the n-th changes must be a really bend in the document. In this case old votes are practically deleted from the weighted average as eq. <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:V_hat1</label>
</attributes>

</ref>
 showes. 
</par>

</item>

</itemize>

</par>
<par>
A general observation is that older votes are never more important than newer ones. In the limit case of a new version with very little number of changes <math>\lambda </math>, old and new votes have the same importance. This is consistent with the fact the updated judgdements are always more reliable. 
</par>
<par>
Now we have a clear view of how votes are scaled over the Chain of Changes, we must look at how <math>\sigma </math> parameter scales. 
</par>

</paragraph>

</subsubsection>
<subsubsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title><math>\boldsymbol {\sigma }</math> Decay</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:s_decay</label>
</attributes>

</label>
 
</par>
<par>
As we said in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:sigma</label>
</attributes>

</ref>
, <math>\sigma </math> parameter measures the trustworthiness of marks, so if marks loses importance along the chain, the total sigma <math>\sigma </math> calculation should consider all the marks but has to evaluate more newer votes. 
</par>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Initial data</title>
</attributes>
<par>
 We know how to calculate <math>\sigma </math> for every <emph>
<attributes>
</attributes>
single
</emph>
 version from equations <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:partial_sigma</label>
</attributes>

</ref>
 and <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:single_sigma</label>
</attributes>

</ref>
 on page <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:partial_sigma</label>
</attributes>

</pageref>
. Consider a stack of revisions that begins with a new document. For every version, excepted the current, we can calculate che <emph>
<attributes>
</attributes>
partial
</emph>
 <math>\sigma </math> and we call that <math>\sigma _ n</math>. 
</par>
<par>
<math><label> eq:sigma_ partial_ n </label>   \sigma _{n} = \sum _{i=1}^{N_ i} \sigma _ i = \sum _{i=1}^{N_ i} \alpha _ i^ B \cdot \left(1- \Delta V\right)^ C \qquad \Delta V = |\bar{V_ n}- V_ i| </math>
</par>
<par>
 where <math>N_ i</math> is the number of votes to the n-th version, <math>\sigma _ i</math> and <math>\alpha _ i</math> are related to the single vote and user. First of all, note that for <textit>
<attributes>
</attributes>
every version
</textit>
 the overall <math>\sigma _ n</math> is calculated using only votes given to that version and that the partial average of marks <math>\bar{V_ n}</math> is used, not the total average <math>\tilde{V_ n}</math>. 
</par>
<par>
The calculation for past versions can be done only one time because data used doesn’t change any more. For the current active version things change a little: in fact every new vote changes the partial average of marks. So, for the latest version <math>\sigma _ n</math> must be calculated every time a vote is added. 
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Decay Factor (DF)</title>
</attributes>
<par>
 Now, as in the case of V Decay, we have to calculate the <emph>
<attributes>
</attributes>
total
</emph>
 <math>\sigma </math> , called <math>\tilde{\sigma _ n}</math>, starting from the first version. 
</par>
<par>
<math><label> eq:s_ hat </label>   \tilde{\sigma }_1 = \sigma _1 \quad \longrightarrow \quad \tilde{\sigma }_ n = \sigma _ n + \Phi _ n \cdot \tilde{\sigma }_{n-1} </math>
</par>
<par>
 As Decay Factor (DF) <math>\Phi </math>, obviously we use the same DF of the V Decay: 
</par>
<par>
<math>  \Phi _ n = \left(1 - \frac{\lambda _ n}{\sum _{i=1}^ n \lambda _ i}\right)^ D </math>
</par>
<par>
 The effect of the DF is the same of that described in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:v_decay</label>
</attributes>

</ref>
. The only difference is that <math>\tilde{\sigma _ n}</math> is a linear combination of contibutes of every version and not a weighted mean. 
</par>

</paragraph>

</subsubsection>
<subsubsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>After a stable version</title>
</attributes>
<par>
<label>
<attributes>
<label>sec:after_stable</label>
</attributes>

</label>
 So far we have considered decays starting from the creation of the document, so that <math>\tilde{V}_1 = \bar{V}_1</math> and <math>\tilde{\sigma }_1 = \sigma _1</math>. If a document is modified after a version marked as stable, its vote must influence the later calculations on new revisions: the work on the document does not restart from the beginning. All the formulas and decays described previously are valid with a change: 
</par>
<par>
<math>  \tilde{V}_1 = \bar{V}_1 + \Theta \cdot \tilde{V_{stable}} \qquad \tilde{\sigma }_1 = \sigma _1 + \Theta \cdot \tilde{\sigma _{stable}} </math>
</par>
<par>
 The total average mark and <math>\sigma </math> of the stable base version are inserted in the decay with a DF <math>\Theta </math>. This factor <math>\Theta </math> could be modeled in various way: 
</par>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\Theta </math> could depend on the number of characters of the stable version. The longer the latest stable version is, the more its votes are important. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\Theta </math> could be a fixed parameter, chosen a posteriori 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\Theta </math> could depend on the number of users have voted the stable version. The more it has been voted, the less must lose importance. 
</par>

</item>

</itemize>

</par>

</subsubsection>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Reaching the threshold</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:reaching_thre</label>
</attributes>

</label>
 Let’s now focus on the mechanism that makes a modified document reaching the threshold of <math>\boldsymbol {\sigma }</math> (<math>\boldsymbol {\sigma _ s}</math>), i.e. when the latest revision becomes a stable milestone. <accapo>Every time the latest version receives a new vote: 
</par>
<par>
<math> \item the \emph{partial} average of marks $\bar{V}_ n$ is updated 

\item the \emph{partial} $\sigma _ n$ is updated (as descrided in section \ref{sec:s_decay}), because $\bar{V}_ n$ has changed. 

\item the \emph{total} $\tilde{\sigma }_ n$ is updated by formula \ref{eq:s_hat} 

\item new value of $\tilde{\sigma }_ n$ is compared to $\sigma _ s$ 

\item if $\tilde{\sigma }_ n \geq \sigma _ s$ the latest version must be labeled as stable because it has been sufficently evaluated: 

 \item the \emph{total} average of marks $\tilde{V_ n}$ is calculated by formula \ref{eq:V_hat1} and assigned to the new stable milestone as ultimate mark. 

\item the final mark is published on the page and it’s no more secret. 

\item all calculations to update users’ coefficient are trigged as we will se in section \ref{sec:change_par} on pag. \pageref{sec:change_par}. 

\item polling can be stopped or no stopped. There are two scenery: 

 \item polling is stopped: reaching the threshold $\sigma _ s$ the docuement has been sufficently evaluated. The final vote remains immutable until new revisions come. 

\item polling is not stopped: new votes for the stable version are computed. $\bar{V_ n}$ and $\tilde{V}_ n$ are updated, but $\sigma _ n$ and $\tilde{\sigma }_ n$ are not. For every new vote, $\sigma _ i$ is calculated by formula \ref{eq:single_sigma} using $\tilde{V}_ n$ as average of marks. Then every $\sigma _ i$ is added directly to $\tilde{\sigma _ n}$ without any DF (document is not changed). Doing so $\sigma $ could only grow\footnote{This point is not so clear: polling could continue, but could $\sigma $ change after it has reached the threshold?}. 





\item if $\tilde{\sigma }_ n \leq \sigma _ s$ the threshold has not be reached yet. 

\item when a new vote is received and we return to point 1. 

</math>
</par>
<par>
 If the document is modified before its latest version has reached <math>\sigma _ s</math>, then a new ring of the Chain of Changes is created and the following operations take place for the previous version: 
</par>
<par>
<math> \item the definitive $\bar{V}_{n-1}$ is calculated. 

\item the definitive $\tilde{V}_{n-1}$ is calculated with the correct DF $\Phi _{n-1}$. 

\item the definitive $\sigma _{n-1}$ is calculated given the definitive $\bar{V}_{n-1}$. 

\item the definitive $\tilde{\sigma }_{n-1}$ is calculated given the correct DF $\Phi _{n-1}$. 

</math>
</par>
<par>
 With all the parameters set for the previous version, we can now do the calculations described in the previous mechanism for the current version. 
</par>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Finding <math>\boldsymbol {\sigma _ s}</math></title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:choose_sigma</label>
</attributes>

</label>
 Choosing the right <math>\sigma _ s</math> threshold of every document is the key of all <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system. This parameter is not fixed and it could be determined by some dynamical conditions: here some proposals. 
</par>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\sigma _ s</math> could depend on the number of visitors on the page. The more users have viewed a page, the more it’s necessary a depth evaluation. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\sigma _ s</math> could depend on the category of the subject of the document 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\sigma _ s</math> could depend on the number on internal and external links to the page. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\sigma _ s</math> must be linked also to the history of a document. When a page is created from scratch <math>\sigma _ s</math> should be high, because it should be more difficult to reach the first stable version than to modify later the document. Then <math>\sigma _ s</math> for following revisions could depend on the number of users involved in the writing of the document or on the lenght of it. 
</par>

</item>

</itemize>

</par>
<par>
In general the more a page is important for the platform, the more <math>\sigma _ s</math> must be high to guarantee an evaluation in deep. 
</par>
<par>
<newpage>

</newpage>

</par>

</subsection>

</section>
<section>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Update User’s Parameters</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:change_par</label>
</attributes>

</label>
 When a stack of revisions become stable, users’ work has been carefully evaluated: it’s time to change users’ trust coefficient to reflect their action within this document. As we described in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:user</label>
</attributes>

</ref>
, <math>\alpha </math> trust coefficient depends on two parameters: the quality of writing <math>a</math> and the qualilty of reviewing <math>b</math>. Both these parameters are changed when a user has taken part of a chain of revision become stable: if the user is the author of one of the revision his <math>a</math> parameter changes, if the user has voted one on more of the revisions his <math>b</math> parameter changes. 
</par>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title><math>\mathbf{\Delta a}</math> calculation</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:deltaa</label>
</attributes>

</label>
 
</par>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Influencial parameters</title>
</attributes>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
In our model, since the <math>\alpha </math> coeffient is related to the expected rank of the user if evaluated by other users, <math>\Delta a</math> must be proportional to the difference between the user’s current <math>\alpha </math> and the average mark assigned to his work, <math>\Delta V = ( \bar{V} - \alpha )</math>. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
Then <math>\Delta a</math> should depend on the importance of the user’s work in the overall document, thus on the ration <math>\lambda _ n / \mu _{tot}</math>, where <math>\lambda _ n</math> is the number of changes by the user and the <math>\mu _{tot}</math> is the total number of characters of the document. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
Also <math>\sigma </math> of votes given to the user could influence the width of <math>\Delta a</math>. Note that we are considering the <emph>
<attributes>
</attributes>
partial
</emph>
 <math>\sigma </math> or <math>\sigma _ n</math> of the user’s version, as calculated in formula <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:sigma_partial_n</label>
</attributes>

</ref>
. If a lot of trusted users vote the document, <math>\Delta a</math> should be more important. To eliminate the influence of the number of voters to this parameter we should use the <emph>
<attributes>
</attributes>
reduced
</emph>
 <math>\sigma </math> , <math>\mathring {\sigma }_ n</math>: 
</par>
<par>
<math>  \mathring {\sigma } _ n= \frac{\sigma _ n}{N_ v} </math>
</par>
<par>
 where <math>N_ v</math> is the number of votes. 
</par>

</item>

</itemize>

</par>
<par>
When a user writes a revision for a document, every subsequent version is related in some measure with his work. Thus, to evaluate the writing qualities of a user we must consider not only the votes assigned to his version but also all the votes given to subsequent versions till the stable one. Obviously the importance of following versions’ votes must be related to the number of changes <emph>
<attributes>
</attributes>
from
</emph>
 the first user’s version. We need a kind of <emph>
<attributes>
</attributes>
Forward Decay
</emph>
 for <math>\Delta a</math> calculation. 
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>User’s version</title>
</attributes>
<par>
 First of all let’s consider the versions directly written by the current user in exam, Alice. For every Alice’s version <math>n</math>, <math>\Delta \tilde{a}_ n</math> is calculated using the following formula: 
</par>
<par>
<math>  \Delta \tilde{a}_ n = \Delta V_ n \cdot \mathring {\sigma _ n} \cdot \frac{\lambda _ n}{\mu _{tot}} </math>
</par>
<par>
 using the notation convention of the previous section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:decay</label>
</attributes>

</ref>
 we can expand the formula as: 
</par>
<par>
<math><label> eq:delta_ a_ par </label>  \Delta \tilde{a}_ n = \left(\bar{V_ n} - \alpha \right) \cdot \frac{\sigma _ n}{N_ v} \cdot \frac{\lambda _ n}{\mu _{tot}} </math>
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Forward Decay</title>
</attributes>
<par>
 Now let’s consider versions after Alice’s work. Starting with the first version after Alice’s version we can calculate every <emph>
<attributes>
</attributes>
partial
</emph>
 <math>\Delta \bar{a}_ j</math> as: 
</par>
<par>
<math>  \Delta \bar{a}_ j = \Psi _ j \cdot \Delta V_ j \cdot \mathring {\sigma _ j} </math>
</par>
<par>
<math><label> eq:delta_ a_ DF </label>   \Delta \bar{a}_ j = \Psi _ j \cdot \left(\bar{V_ j}- \alpha _{Alice}\right) \cdot \frac{\sigma _ j}{N_ v} </math>
</par>
<par>
 where <math>\bar{V_ j}</math> and <math>\sigma _ j</math> are related the j-th version, and <math>\alpha _{Alice}</math> is always the <math>\alpha </math> coeffient of Alice. 
</par>
<par>
<math>\mathbf{\Psi _ j}</math> is the Decay Factor (DF) that weighs as usually the importance of following versions (instead of <math>\Phi _ n</math> that is used with the previous versions). This DF depend on the number of changes of the j-th version related to the total number of changes <emph>
<attributes>
</attributes>
from
</emph>
 Alice’s version <math>\lambda _ n</math>. 
</par>
<par>
<math><label> eq:psi </label>   \Psi _ j = \left(1- \frac{\lambda _ j}{\lambda _{j_{tot}}}\right)^ E </math>
</par>
<par>
<math>  \lambda _{j_{tot}} = \sum _{i=n}^ j \lambda _ i </math>
</par>
<par>
 where E is a parameter defined a posteriori. 
</par>
<par>
We can observe that if the versions after Alice’s one introduces a lot of changes, their votes are not influential for Alice’s <math>\Delta a</math>. Otherwise the newer votes are also related to Alice’s work and consequentally are important for her rank. 
</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Total <math>\boldsymbol {\Delta a}</math></title>
</attributes>
<par>
 We can now calculate the total <math>\Delta a</math> for Alice: 
</par>
<par>
<math>  \Delta a_{tot} = F \cdot \gamma \cdot \left(\sum _{n=1}^ A \Delta \tilde{a}_ n + \sum _{j=1}^ B \Delta \bar{a}_ j\right) </math>
</par>
<par>
 where <math>F</math> is a parameter chosen a posteriori, <math>A</math> is the number of the versions written by Alice and B is the number of versions between Alice’s one and the stable one. 
</par>
<par>
If Alice has written more than once in a single chain of changes: 
</par>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
<math>\Delta \tilde{a}_ n</math> is calculated for every Alice’s version with formula <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:delta_a_par</label>
</attributes>

</ref>
. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
after every Alice’s version <math>\Delta \bar{a}_ j</math> is calculated with the Forward Decay process with formula <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>eq:delta_a_DF</label>
</attributes>

</ref>
 for every version till it is met the stable version or another Alice’s version. 
</par>

</item>

</itemize>

</par>
<par>
 As you can see finally <math>\Delta a_{tot}</math> depends on the user’s activity coefficient <math>\gamma </math>. If the user is inactive (<math>0 < \gamma < 1</math>) then <math>\Delta a_{tot}</math> is decreased. If the user is active (<math>\gamma >1</math>), then it is increased. An active user could quickly increase his <math>\alpha </math> if he receives a lot of good votes. 
</par>

</paragraph>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title><math>\mathbf{\Delta b}</math> calculation</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:deltab</label>
</attributes>

</label>
 The <math>b</math> parameter measures the user’s ability to judge other users’ works. This parameter is important because a lot of users on the platform are only viewers and not writers: their <math>\alpha </math> is fundamental because they are who votes the documents, hence it has to reflect the quality of their actions. 
</par>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Influencial parameters</title>
</attributes>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
First of all, an important parameter is the deviation of the user’s vote from the mean of votes. If the vote is too distant from the mean it could imply that the user is not good at evaluate properly the document. We could define a parameter <math>\varphi </math> calculated as: 
</par>
<par>
<math>  \varphi = \left(\frac{\delta - \Delta V}{\delta }\right)^ G \quad \longrightarrow \quad \Delta b \propto \delta </math>
</par>
<par>
 where <math>G</math> is a parameter determined a posteriori and <math>\delta </math> is the <emph>
<attributes>
</attributes>
standard deviation
</emph>
 of votes assigned to a <emph>
<attributes>
</attributes>
single
</emph>
 version: 
</par>
<par>
<math>  \delta = \sqrt{ \frac{1}{N} \sum _{i=1}^ N \left(V_ i - \bar{V}\right)^2} </math>
</par>
<par>
 where <math>N</math> is the number of votes and <math>\bar{V}</math> is the <emph>
<attributes>
</attributes>
partial
</emph>
 average of votes of the current version. <math>\Delta V</math> is the absoulute value of the difference between the vote <math>V_ i</math> in exam and <math>\bar{V}</math>: 
</par>
<par>
<math>  \Delta V = | V_ i - \bar{V}| </math>
</par>
<par>
 There are different scenarios: 
</par>
<par>
<itemize>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
if <math>\Delta V < \delta </math>, <math>\varphi </math> is always less then 1 and positive. Thus <math>\Delta b\propto \varphi </math> is positive and user’s <math>\alpha </math> increases. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
if <math>\delta < \Delta V < 2\delta </math>, <math>\varphi </math> is negative and less then 1. Thus <math>b</math> decreases by a small amount and <math>\alpha </math> decreases. 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
if <math>\Delta V > 2\delta </math>, <math>\varphi </math> is negative and greater then 1. So <math>b</math> decreases much and so does <math>\alpha </math> . 
</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
finally is <math>\Delta V \simeq \delta </math> then <math>\varphi \simeq 0</math>. <math>b</math> and <math>\alpha </math> doesn’t change because the vote is distributed normally. 
</par>

</item>

</itemize>

</par>

</item>
<item>
<attributes>
<term>None</term>
</attributes>
<par>
Also user’s <math>\alpha </math> is important to measure <math>\Delta b</math>. If a trusted user votes far from the average is little probable that he has judged in the wrong way: we trust that user! Variations of <math>b</math> linked with the distribution of votes must be weighted by user’s <math>\alpha </math> in this way: 
</par>
<par>
<math>  \Delta b \propto \left(1- \alpha \right)^ H </math>
</par>
<par>
 The exponent <math>H</math> could be setted a posteriori. If a user is already trusted his <math>\Delta b</math> changes slowly. 
</par>

</item>

</itemize>

</par>

</paragraph>
<paragraph>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Total <math>\mathbf{\Delta b}</math></title>
</attributes>
<par>
 Given a Chain of Changes between two stable versions and a specific user that has partecipated in the poll, we calculate <math>\Delta b_ n</math> for each of his vote using the <emph>
<attributes>
</attributes>
partial
</emph>
 average of marks <math>\bar{V_ n}</math> of every different version: 
</par>
<par>
<math>  \Delta b_ n = \left(1- \alpha \right)^ H \cdot \varphi </math>
</par>
<par>
<math>  \Delta b_ n = \left(1- \alpha \right)^ H \cdot \left(\frac{\delta - \Delta V}{\delta }\right)^ G </math>
</par>
<par>
 Remeber that every user can vote only one time a revision but can vote more than one in Chain of Changes. Then <math>\Delta b_ n</math> are summed up to make <emph>
<attributes>
</attributes>
total
</emph>
 <math>\Delta b</math> of a single user: 
</par>
<par>
<math>  \Delta b_{tot} = L \cdot \gamma \cdot \sum _{i=1}^ N \Delta b_ i </math>
</par>
<par>
 where <math>N</math> is the number of the user’s vote and <math>L</math> is a parameter to determine a posteriori as usual. Also the <math>\gamma </math> activity coefficient of the user is present as in the <math>\Delta a_{tot}</math> process. Active users’ coefficients could change more quickly than inactive users’ ones. 
</par>

</paragraph>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title><math>\boldsymbol {\gamma }</math> calculation</title>
</attributes>
<par>
 <label>
<attributes>
<label>sec:gamma</label>
</attributes>

</label>
 User’s activity coefficient <math>\gamma </math> is important because it influences the size of the variation of <math>a</math> and <math>b</math>, so it directly influences changes of <math>\alpha </math> . The logic behind the calculations is that if a user is active we can change a lot his rating because it is frequently updated. If a user is inactive changes must occur more slowly because we don’t know when coefficients will be updated again and it could be not in the short period. Activity coefficient could be calcaluted as: 
</par>
<par>
<math>  \gamma = P \cdot \frac{actions}{days} \cdot Q^{-\mbox{\textit{inactive days}}} </math>
</par>
<par>
 <math>\gamma </math> is proportional to the number of actions by day and to a constant <math>P</math>. Then, for every day <footnote>
<attributes>
<num>3</num>
</attributes>
another fixed period of time could be chosen
</footnote>
 of inactivity, <math>\gamma </math> is scaled by an exponential factor with base <math>Q > 1</math>. 
</par>
<par>
<newpage>

</newpage>

</par>

</subsection>

</section>
<section>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Pros and Cons, Further development</title>
</attributes>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Pros</title>
</attributes>
<par>
<description>
<item>
<attributes>
<term>Automatic</term>
</attributes>
<par>
The <math>\sigma </math> <emph>
<attributes>
</attributes>
Threshold
</emph>
 mechanism tries to automate the determination of the stability of the documents. We decide to link stability with the quality of the overall judgement in the sense described in section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:sigma</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:sigma</label>
</attributes>

</pageref>
. 
</par>

</item>
<item>
<attributes>
<term>Expandable</term>
</attributes>
<par>
For how it is build, <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system is only a valid <emph>
<attributes>
</attributes>
base
</emph>
 for a more complex and complete rating system. A lot of parameters can be further modeled and a lot of mechanism have to be developed more. 
</par>

</item>
<item>
<attributes>
<term>Flexible</term>
</attributes>
<par>
The system has 13 parameters that influence the calculation to be determined a posteriori with tests and simulations. This increases a lot the flexibility of the system. 
</par>

</item>
<item>
<attributes>
<term>Scalable</term>
</attributes>
<par>
Calculations involved in the system have been thought keeping in mind computational complexity. We try to minimize the number of necessary operations. 
</par>

</item>
<item>
<attributes>
<term>Fair</term>
</attributes>
<par>
The system tries to evaluate fairly the quality of every user and of every document. The more a user is active, the more he can improve his reputation. Users’ engagement is prized and measured. Document’s reliability is evaluated thoughtful and we try to discourage bad polling. 
</par>

</item>

</description>

</par>

</subsection>
<subsection>
<attributes>
<toc>None</toc>
<*modifier*>None</*modifier*>
<title>Cons</title>
</attributes>
<par>
<description>
<item>
<attributes>
<term>Number of users</term>
</attributes>
<par>
To work correctly, <textbf>
<attributes>
</attributes>
<textit>
<attributes>
</attributes>
WikiRating 
</textit>

</textbf>
system needs a lot of users and a lot of votes to every document. Only with a lot of data, marks and their trustworthiness, measured by <math>\sigma </math>, make sense. 
</par>

</item>
<item>
<attributes>
<term>Review ability</term>
</attributes>
<par>
Users’ ability to review other works measurament (See section <ref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltab</label>
</attributes>

</ref>
, pag. <pageref>
<attributes>
<*modifier*>None</*modifier*>
<label>sec:deltab</label>
</attributes>

</pageref>
) could be improve a lot. We need to test the current mechanism because it could evaluate normal votes as bad ones if not set correctly. The system is more good at rating users how writes documents than users that vote them. This could be a problem because the majority of users are reviewers. The problem could be solved measuring more precisely the <math>b</math> coefficient. 
</par>

</item>

</description>

</par>

</subsection>

</section>

</document>

</document>
